<div class="highlight"><pre><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;string.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdlib.h&gt;</span><span class="cp"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">function</span><span class="p">(){</span><span class="w"></span>
<span class="w">    </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;in function&quot;</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">functionVar</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">notAccessed</span><span class="p">(){</span><span class="w"></span>
<span class="w">    </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;you have reached the unreachable function</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">noAccess</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">42</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">(){</span><span class="w"></span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">m</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">));</span><span class="w"></span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="n">buff</span><span class="w"> </span><span class="p">[</span><span class="mi">32</span><span class="p">];</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">t</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">function</span><span class="p">();</span><span class="w"></span>
<span class="w">    </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;function: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">t</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="n">str</span><span class="w"> </span><span class="p">[</span><span class="mi">32</span><span class="p">]</span><span class="w"> </span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">strcpy</span><span class="p">(</span><span class="n">str</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;here is some stuff&quot;</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">strcpy</span><span class="p">(</span><span class="n">buff</span><span class="p">,</span><span class="w"> </span><span class="n">str</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">strcpy</span><span class="p">(</span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="n">str</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;The address of buff is : %p </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">buff</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;the address of str is : %p </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">str</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;str contains: %s </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">str</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">end</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>

<stdio.h> 
<string.h> 
<stdlib.h> 
function ( ) { 
printf ( " in function " ) ; 
functionVar = 3 ; 
return 1 ; 
} 
notAccessed ( ) { 
printf ( " you have reached the unreachable function \n " ) ; 
noAccess = 42 ; 
return 1 ; 
} 
main ( ) { 
* m = malloc ( sizeof ( ) ) ; 
buff [ 32 ] ; 
t = function ( ) ; 
printf ( " function: %d \n " , t ) ; 
str [ 32 ] ; 
strcpy ( str , " here is some stuff " ) ; 
strcpy ( buff , str ) ; 
strcpy ( m , str ) ; 
printf ( " The address of buff is : %p  \n " , buff ) ; 
printf ( " the address of str is : %p  \n " , str ) ; 
printf ( " str contains: %s  \n " , str ) ; 
end = 0 ; 
} 
27 157
<div class="highlight"><pre><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;string.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdlib.h&gt;</span><span class="cp"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">function</span><span class="p">(){</span><span class="w"></span>
<span class="w">    </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;in function&quot;</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">functionVar</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">3</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">notAccessed</span><span class="p">(){</span><span class="w"></span>
<span class="w">    </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;you have reached the unreachable function</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">noAccess</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">42</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">(){</span><span class="w"></span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">m</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">));</span><span class="w"></span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="n">buff</span><span class="w"> </span><span class="p">[</span><span class="mi">32</span><span class="p">];</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">t</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">function</span><span class="p">();</span><span class="w"></span>
<span class="w">    </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;function: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">t</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="n">str</span><span class="w"> </span><span class="p">[</span><span class="mi">32</span><span class="p">]</span><span class="w"> </span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="n">strcpy</span><span class="p">(</span><span class="n">str</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;here is some stuff&quot;</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">strcpy</span><span class="p">(</span><span class="n">buff</span><span class="p">,</span><span class="w"> </span><span class="n">str</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">strcpy</span><span class="p">(</span><span class="n">m</span><span class="p">,</span><span class="w"> </span><span class="n">str</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;The address of buff is : %p </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">buff</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;the address of str is : %p </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">str</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;str contains: %s </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">str</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">end</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>

pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
.hll { background-color: #222222 }
.c { color: #000080 } /* Comment */
.err { color: #cccccc; border: 1px solid #FF0000 } /* Error */
.esc { color: #cccccc } /* Escape */
.g { color: #cccccc } /* Generic */
.k { color: #cdcd00 } /* Keyword */
.l { color: #cccccc } /* Literal */
.n { color: #cccccc } /* Name */
.o { color: #3399cc } /* Operator */
.x { color: #cccccc } /* Other */
.p { color: #cccccc } /* Punctuation */
.ch { color: #000080 } /* Comment.Hashbang */
.cm { color: #000080 } /* Comment.Multiline */
.cp { color: #000080 } /* Comment.Preproc */
.cpf { color: #000080 } /* Comment.PreprocFile */
.c1 { color: #000080 } /* Comment.Single */
.cs { color: #cd0000; font-weight: bold } /* Comment.Special */
.gd { color: #cd0000 } /* Generic.Deleted */
.ge { color: #cccccc; font-style: italic } /* Generic.Emph */
.gr { color: #FF0000 } /* Generic.Error */
.gh { color: #000080; font-weight: bold } /* Generic.Heading */
.gi { color: #00cd00 } /* Generic.Inserted */
.go { color: #888888 } /* Generic.Output */
.gp { color: #000080; font-weight: bold } /* Generic.Prompt */
.gs { color: #cccccc; font-weight: bold } /* Generic.Strong */
.gu { color: #800080; font-weight: bold } /* Generic.Subheading */
.gt { color: #0044DD } /* Generic.Traceback */
.kc { color: #cdcd00 } /* Keyword.Constant */
.kd { color: #00cd00 } /* Keyword.Declaration */
.kn { color: #cd00cd } /* Keyword.Namespace */
.kp { color: #cdcd00 } /* Keyword.Pseudo */
.kr { color: #cdcd00 } /* Keyword.Reserved */
.kt { color: #00cd00 } /* Keyword.Type */
.ld { color: #cccccc } /* Literal.Date */
.m { color: #cd00cd } /* Literal.Number */
.s { color: #cd0000 } /* Literal.String */
.na { color: #cccccc } /* Name.Attribute */
.nb { color: #cd00cd } /* Name.Builtin */
.nc { color: #00cdcd } /* Name.Class */
.no { color: #cccccc } /* Name.Constant */
.nd { color: #cccccc } /* Name.Decorator */
.ni { color: #cccccc } /* Name.Entity */
.ne { color: #666699; font-weight: bold } /* Name.Exception */
.nf { color: #cccccc } /* Name.Function */
.nl { color: #cccccc } /* Name.Label */
.nn { color: #cccccc } /* Name.Namespace */
.nx { color: #cccccc } /* Name.Other */
.py { color: #cccccc } /* Name.Property */
.nt { color: #cccccc } /* Name.Tag */
.nv { color: #00cdcd } /* Name.Variable */
.ow { color: #cdcd00 } /* Operator.Word */
.w { color: #cccccc } /* Text.Whitespace */
.mb { color: #cd00cd } /* Literal.Number.Bin */
.mf { color: #cd00cd } /* Literal.Number.Float */
.mh { color: #cd00cd } /* Literal.Number.Hex */
.mi { color: #cd00cd } /* Literal.Number.Integer */
.mo { color: #cd00cd } /* Literal.Number.Oct */
.sa { color: #cd0000 } /* Literal.String.Affix */
.sb { color: #cd0000 } /* Literal.String.Backtick */
.sc { color: #cd0000 } /* Literal.String.Char */
.dl { color: #cd0000 } /* Literal.String.Delimiter */
.sd { color: #cd0000 } /* Literal.String.Doc */
.s2 { color: #cd0000 } /* Literal.String.Double */
.se { color: #cd0000 } /* Literal.String.Escape */
.sh { color: #cd0000 } /* Literal.String.Heredoc */
.si { color: #cd0000 } /* Literal.String.Interpol */
.sx { color: #cd0000 } /* Literal.String.Other */
.sr { color: #cd0000 } /* Literal.String.Regex */
.s1 { color: #cd0000 } /* Literal.String.Single */
.ss { color: #cd0000 } /* Literal.String.Symbol */
.bp { color: #cd00cd } /* Name.Builtin.Pseudo */
.fm { color: #cccccc } /* Name.Function.Magic */
.vc { color: #00cdcd } /* Name.Variable.Class */
.vg { color: #00cdcd } /* Name.Variable.Global */
.vi { color: #00cdcd } /* Name.Variable.Instance */
.vm { color: #00cdcd } /* Name.Variable.Magic */
.il { color: #cd00cd } /* Literal.Number.Integer.Long */
